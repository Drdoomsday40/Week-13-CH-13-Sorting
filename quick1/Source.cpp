// FILE:            Source.cpp
// IMPLEMENTED BY:  Lucien Maurice
// EMAIL:           Luciencmaurice@gmail.com
//
// HW 13.1
//
// Ch13_QuickSort.cpp : Defines the entry point for the console application.
//

#include <algorithm>   // Provides swap
#include <cstdlib>     // Provides EXIT_SUCCESS, size_t
#include <iostream>
#include <ctime>     // For the time function
#include <chrono>
#include "quick1.h"
#include "quick2.hpp"

using namespace std;
using namespace std::chrono;

int* getRandomNumbers(int);
void printarray(int*, int);
void printarray2(int*, int);
bool valid(int*, int);
int checkNumber(int*, int);
void selectionsort(int data[], size_t n);

int main()
{
    int array1[1], array2[26], array3[1000000];

    cout << "Testing quicksort(NULL, 0): ";
    quicksort(NULL, 0);
    cout << "PASSED\n\n";

    cout << "Sort an array with one element, enter a number: ";
    cin >> array1[0];
    quicksort(array1, 1);
    cout << "Content after sorting: " << array1[0] << ((valid(array1, 1)) ? " PASSED" : " FAILED") << endl;;

    cout << "\nGenerate an array with 1000 random elements: " << endl;
    int N = 1000;
    int* intArray = getRandomNumbers(N);
    printarray(intArray, N);
    quicksort(intArray, N);
    cout << "\nContent after sorting: \n";
    printarray(intArray, N);
    cout << "\nSorting 1000 random elements: ";
    cout << ((valid(intArray, N)) ? "PASSED" : "FAILED") << endl;

    cout << "\nGenerate an array contains 1000 elements with two copies of the numbers from 0 to 499: " << endl;
    for (int i = 0; i < N; i++)
        intArray[i] = (i % 500);
    printarray(intArray, N);
    quicksort(intArray, N);
    cout << "\nContent after sorting: \n";
    printarray(intArray, N);
    cout << "\nSorting an array contains 1000 elements with two copies of the numbers from 0 to 499: ";
    cout << ((valid(intArray, N)) ? "PASSED" : "FAILED") << endl;

    cout << "\nGenerate an array that contains the numbers 0 through 25 already sorted: " << endl;
    for (int i = 0; i < 26; i++)
        array2[i] = i;
    printarray2(array2, 26);
    quicksort(array2, 26);
    cout << "\nContent after sorting: \n";
    printarray2(array2, 26);
    cout << "\nSorting an array that contains the numbers 0 through 25 already sorted: ";
    cout << ((valid(array2, 26)) ? "PASSED" : "FAILED") << endl;

    cout << "\nGenerate an array that contains the numbers 25 through 0 in reverse order: " << endl;
    for (int i = 0; i < 26; i++)
        array2[i] = 25 - i;
    printarray2(array2, 26);
    quicksort(array2, 26);
    cout << "\nContent after sorting: \n";
    printarray2(array2, 26);
    cout << "\nSorting an array that contains the numbers 25 through 0 in reverse order: ";
    cout << ((valid(array2, 26)) ? "PASSED" : "FAILED") << endl;

    N = 10000;
    cout << "\nTime required to sort " << N << " random integers\n";

    delete intArray;
    intArray = getRandomNumbers(N);
    int check = checkNumber(intArray, N);
    high_resolution_clock::time_point t1 = high_resolution_clock::now();
    selectionsort(intArray, N);
    high_resolution_clock::time_point t2 = high_resolution_clock::now();
    duration<double> time_span = t2 - t1;
    if (valid(intArray, N) && checkNumber(intArray, N) == check)
        cout << "Using selection sort: It took " << time_span.count() << " seconds.\n";
    else
        cout << "The sorting fails.\n";

    delete intArray;
    intArray = getRandomNumbers(N);
    check = checkNumber(intArray, N);
    t1 = high_resolution_clock::now();
    quicksort(intArray, N);
    t2 = high_resolution_clock::now();
    time_span = t2 - t1;
    if (valid(intArray, N) && checkNumber(intArray, N) == check)
        cout << "Using quick sort: It took " << time_span.count() << " seconds.\n";
    else
        cout << "The sorting fails.\n";

    N = 100000;
    cout << "\nTime required to sort " << N << " random integers\n";

    delete intArray;
    intArray = getRandomNumbers(N);
    check = checkNumber(intArray, N);
    t1 = high_resolution_clock::now();
    selectionsort(intArray, N);
    t2 = high_resolution_clock::now();
    time_span = t2 - t1;
    if (valid(intArray, N) && checkNumber(intArray, N) == check)
        cout << "Using selection sort: It took " << time_span.count() << " seconds.\n";
    else
        cout << "The sorting fails.\n";

    delete intArray;
    intArray = getRandomNumbers(N);
    check = checkNumber(intArray, N);
    t1 = high_resolution_clock::now();
    quicksort(intArray, N);
    t2 = high_resolution_clock::now();
    time_span = t2 - t1;
    if (valid(intArray, N) && checkNumber(intArray, N) == check)
        cout << "Using quick sort: It took " << time_span.count() << " seconds.\n";
    else
        cout << "The sorting fails.\n";

    //    N = 1000000;
    //    cout << "\nTime required to sort " << N << " random integers\n";
    //
    //    delete intArray;
    //    intArray = getRandomNumbers(N);
    //    check = checkNumber(intArray, N);
    //    t1 = high_resolution_clock::now();
    //    selectionsort(intArray, N);
    //    t2 = high_resolution_clock::now();
    //    time_span = t2 - t1;
    //    if (valid(intArray, N) && checkNumber(intArray, N) == check)
    //        cout << "Using selection sort: It took " << time_span.count() << " seconds.\n";
    //    else
    //        cout << "The sorting fails.\n";
    //
    //    delete intArray;
    //    intArray = getRandomNumbers(N);
    //    check = checkNumber(intArray, N);
    //    t1 = high_resolution_clock::now();
    //    quicksort(intArray, N);
    //    t2 = high_resolution_clock::now();
    //    time_span = t2 - t1;
    //    if (valid(intArray, N) && checkNumber(intArray, N) == check)
    //        cout << "Using quick sort: It took " << time_span.count() << " seconds.\n";
    //    else
    //        cout << "The sorting fails.\n";

    N = 50000;
    cout << "\nTime required to sort " << N << " ascending integers using quick sort\n";

    for (int i = 0; i < N; i++)
        array3[i] = i;
    check = checkNumber(array3, N);
    t1 = high_resolution_clock::now();
    quicksort(array3, N);
    t2 = high_resolution_clock::now();
    time_span = t2 - t1;
    if (valid(array3, N) && checkNumber(array3, N) == check)
        cout << "With the first element as the pivot: It took " << time_span.count() << " seconds.\n";
    else
        cout << "The sorting fails.\n";

    for (int i = 0; i < N; i++)
        array3[i] = i;
    check = checkNumber(array3, N);
    t1 = high_resolution_clock::now();
    quicksort2(array3, N);
    t2 = high_resolution_clock::now();
    time_span = t2 - t1;
    if (valid(array3, N) && checkNumber(array3, N) == check)
        cout << "With middle value of 3 elements as the pivot: It took " << time_span.count() << " seconds.\n";
    else
        cout << "The sorting fails.\n";

    return EXIT_SUCCESS;
}

int* getRandomNumbers(int num)
{
    int* arr = nullptr;    // Array to hold the numbers

                        // Return null if num is zero or negative.
    if (num <= 0)
        return NULL;

    // Dynamically allocate the array.
    arr = new int[num];

    // Seed the random number generator by passing
    // the return value of time(0) to srand.
    srand(time(0));

    // Populate the array with random numbers.
    for (int count = 0; count < num; count++)
        arr[count] = rand() % num;

    // Return a pointer to the array.
    return arr;
}

void printarray(int* data, int size) {
    for (int i = 0; i < size; i++) {
        printf("%4d", data[i]);
        if (i % 25 == 24)
            cout << endl;
    }
}

void printarray2(int* data, int size) {
    for (int i = 0; i < size; i++) {
        printf("%3d", data[i]);
    }
}

bool valid(int* data, int size) {
    for (int i = 0; i < size - 1; i++)
        if (data[i] > data[i + 1])
            return false;
    return true;
}

int checkNumber(int* data, int size) {
    int result = 0;
    for (int i = 0; i < size; i++)
        result += data[i];
    return result % size;
}

void selectionsort(int data[], size_t n)
// Library facilities used: algorithm, cstdlib
{
    size_t i, j, index_of_largest;
    int largest;

    if (n == 0)
        return; // No work for an empty array.

    for (i = n - 1; i > 0; --i)
    {
        largest = data[0];
        index_of_largest = 0;
        for (j = 1; j <= i; ++j)
        {
            if (data[j] > largest)
            {
                largest = data[j];
                index_of_largest = j;
            }
        }
        swap(data[i], data[index_of_largest]);
    }
}

/*
 Testing quicksort(NULL, 0): PASSED

 Sort an array with one element, enter a number: 555
 Content after sorting: 555 PASSED

 Generate an array with 1000 random elements:
  998 973 902 925 255 702 138  66 704 566 664 303 248 511 507 945 337 725 662 276 592 652 540 179 207
  540 421 681 414 332   8 345 151 631 573 280 302 172 105 557  16 570 749 550 814 817 384 386 400 809
  818 668 510 136 523 312 569 396  21 277 844   7 782 584  96 780 504 446 969 275 473 218 685 676 123
  727 170 964 301  74 878 135 145 112 968  13 397 165 348 797 431 866 491 371 366 180   6 291 182 610
  620 233 241 336 991 265 112 473 619 125 403 238 754 772   9 973 777 229 116 233 995 801 732 557 271
  775 181 648 100 550 178 966 975  15 381 291 256 110 949 447   3 964 215 500 403 385 484 387 248 172
  463 440 163 749 479 637 790 498 621 597 326 850 287 675 900  95 698 241  91 165 708 693 327 788 617
  226 601 122 925 146 590  15 252 449 272  72 233 235 897 299 477 689 674 929  69 718 751 784 186 248
  526 949 734   0 180 841 866 594 513  57 789 266 715 318 653 789 795 136 385 376 214 610 903 393 740
  360 562 471 116 993 626 478 486 488 413 359  42 173 978 830 856 686 341 706 312 692 337 388 487 758
  783 459 978 545 360 347 450 406 426  70 383 963 360 598   7 944 352 652 579   0 260 491 420 691 978
  505  83 319 401 393 490 968 242  96 992 503 871 119 711 225  10 472 547 894 364 128 570  88  62 364
  752 313 681 534 289 205 650  98 544 940 756 920 684 378 338 637  26 715  12  33 125 526 880 528 889
  942 975 716 445 393 876 353 511 587 523 203 838 807 991 281 196 157 669 432 207 847 687 323 850 790
  576 505 381 307 139  70 630 264 949  96 533 504 227 735 626  42   0 175 889 930 802 810   6 557 139
  739 564 414 697 888  90 849 827  10 776 448 768 521 108 658 180 693 577 856 704 191 226 368  25 727
  447 877 506 507 434 397 844 163 480 108 645 829 506 675 670 692 768  76 805 552 777 189 450 508 136
  227 709 811   1 473 421 279 541 870  41 938 640 993 212 466 461  24 135 545 452 920 764  61 380 500
   87 638 855 121 743 728 243  71 774 480 877  17 204 135 885 724 341 385 865 665 451 899 670 222 949
  379 117 564 739 570 827 205 990 591 675 808 189 777 451 120 919 657 711 864 431  65 276 749 742 806
  165 751 642 169 818 838 230 462 218 810  33 585 960 916 659 403 613 621 182 929  22 210 217  37  29
  836 580  39 829 422 227 696 564 163 906 503 932 893 455 744 263 117 887 600 278  48 937 729 150 203
  234 901 841 218 330 919 310 866 714 396 823 592 926  65   1 729 965 259 994 253 872 412 225 712 751
  125 596 178 909 842 529 237 939 376 545 208  61 237 995 691 722 193 961 780 861 183 413 312 340 207
   39 498 990 306 290 461 390 655 835  36 728 863 322 167 560 191 868 803  17 110 765 966 715  14  57
  941 962 177 183  62 868 391 385 426 934 717 179 544 913 428 942 362 380 444 840 464 328 876 332  66
  205 369  34 554 279 701 779 474 723 940 207 384 462 627 364 310  41 824 410 379 998 381  38 321 265
  385 662 128 856 113 644 709 573 479 335 353 577 300  90 276 767 213 803 505 573  15 655 814  79 467
  985 166 297 630  89 342 632 936 899 271  19 267 398 798 522 164 610 587 415 146 426  65 870 989 625
  226 679 502 963 542 715 850 693 869 728 804 780 594 347 276 125 373 490 130 501 617 561 618 554 184
  748 587 910 574 361 936  68 873 526 658 541  20 131  25 906 699  68  21 336 981 939 777 622 770 392
  822 953 115 167 822 228 193 398 406 691 591 281 548 105 513  41 675 334 759 108 717 969 518 204  24
  673 647  74 303 700 881 628 719 845 331 783 626 499 663 680 393 483 422 163 894 121 859 312  40 105
  736 968 924 639 952 216 411 361 121 660 278  23 614 737 631 389 951 994 786  52  47 465 301 412 181
  620 126 940 729  12 537 411 254 652 440 596 683 275 937 657 713 608 801 968 724 350 987  23 694 529
  292 672 481 544 548 479 382 287 344 573 670 915 177 286   1 104 663 547 672 664 644 116 949 710 236
  257 199 875 718 979 914  21 175 896 209 904 957 159 874 936 247 277 624 240 518 509 612 522 400 791
  954 561 507 775 947 761 761 753 214 971 350 941 992 696 834 576 903 932 875 315 957 933 885 373 895
   91 485 417 248  94 977 374 434 737 267 335 982 328 202 663 339 582 372 760 755 136 667 345 384 297
  307 964 513 753  98  92 339  14 804 672 336 249 235 349 493 525 788 223  19 360 360 612 796 771 288

 Content after sorting:
    0   0   0   1   1   1   3   6   6   7   7   8   9  10  10  12  12  13  14  14  15  15  15  16  17
   17  19  19  20  21  21  21  22  23  23  24  24  25  25  26  29  33  33  34  36  37  38  39  39  40
   41  41  41  42  42  47  48  52  57  57  61  61  62  62  65  65  65  66  66  68  68  69  70  70  71
   72  74  74  76  79  83  87  88  89  90  90  91  91  92  94  95  96  96  96  98  98 100 104 105 105
  105 108 108 108 110 110 112 112 113 115 116 116 116 117 117 119 120 121 121 121 122 123 125 125 125
  125 126 128 128 130 131 135 135 135 136 136 136 136 138 139 139 145 146 146 150 151 157 159 163 163
  163 163 164 165 165 165 166 167 167 169 170 172 172 173 175 175 177 177 178 178 179 179 180 180 180
  181 181 182 182 183 183 184 186 189 189 191 191 193 193 196 199 202 203 203 204 204 205 205 205 207
  207 207 207 208 209 210 212 213 214 214 215 216 217 218 218 218 222 223 225 225 226 226 226 227 227
  227 228 229 230 233 233 233 234 235 235 236 237 237 238 240 241 241 242 243 247 248 248 248 248 249
  252 253 254 255 256 257 259 260 263 264 265 265 266 267 267 271 271 272 275 275 276 276 276 276 277
  277 278 278 279 279 280 281 281 286 287 287 288 289 290 291 291 292 297 297 299 300 301 301 302 303
  303 306 307 307 310 310 312 312 312 312 313 315 318 319 321 322 323 326 327 328 328 330 331 332 332
  334 335 335 336 336 336 337 337 338 339 339 340 341 341 342 344 345 345 347 347 348 349 350 350 352
  353 353 359 360 360 360 360 360 361 361 362 364 364 364 366 368 369 371 372 373 373 374 376 376 378
  379 379 380 380 381 381 381 382 383 384 384 384 385 385 385 385 385 386 387 388 389 390 391 392 393
  393 393 393 396 396 397 397 398 398 400 400 401 403 403 403 406 406 410 411 411 412 412 413 413 414
  414 415 417 420 421 421 422 422 426 426 426 428 431 431 432 434 434 440 440 444 445 446 447 447 448
  449 450 450 451 451 452 455 459 461 461 462 462 463 464 465 466 467 471 472 473 473 473 474 477 478
  479 479 479 480 480 481 483 484 485 486 487 488 490 490 491 491 493 498 498 499 500 500 501 502 503
  503 504 504 505 505 505 506 506 507 507 507 508 509 510 511 511 513 513 513 518 518 521 522 522 523
  523 525 526 526 526 528 529 529 533 534 537 540 540 541 541 542 544 544 544 545 545 545 547 547 548
  548 550 550 552 554 554 557 557 557 560 561 561 562 564 564 564 566 569 570 570 570 573 573 573 573
  574 576 576 577 577 579 580 582 584 585 587 587 587 590 591 591 592 592 594 594 596 596 597 598 600
  601 608 610 610 610 612 612 613 614 617 617 618 619 620 620 621 621 622 624 625 626 626 626 627 628
  630 630 631 631 632 637 637 638 639 640 642 644 644 645 647 648 650 652 652 652 653 655 655 657 657
  658 658 659 660 662 662 663 663 663 664 664 665 667 668 669 670 670 670 672 672 672 673 674 675 675
  675 675 676 679 680 681 681 683 684 685 686 687 689 691 691 691 692 692 693 693 693 694 696 696 697
  698 699 700 701 702 704 704 706 708 709 709 710 711 711 712 713 714 715 715 715 715 716 717 717 718
  718 719 722 723 724 724 725 727 727 728 728 728 729 729 729 732 734 735 736 737 737 739 739 740 742
  743 744 748 749 749 749 751 751 751 752 753 753 754 755 756 758 759 760 761 761 764 765 767 768 768
  770 771 772 774 775 775 776 777 777 777 777 779 780 780 780 782 783 783 784 786 788 788 789 789 790
  790 791 795 796 797 798 801 801 802 803 803 804 804 805 806 807 808 809 810 810 811 814 814 817 818
  818 822 822 823 824 827 827 829 829 830 834 835 836 838 838 840 841 841 842 844 844 845 847 849 850
  850 850 855 856 856 856 859 861 863 864 865 866 866 866 868 868 869 870 870 871 872 873 874 875 875
  876 876 877 877 878 880 881 885 885 887 888 889 889 893 894 894 895 896 897 899 899 900 901 902 903
  903 904 906 906 909 910 913 914 915 916 919 919 920 920 924 925 925 926 929 929 930 932 932 933 934
  936 936 936 937 937 938 939 939 940 940 940 941 941 942 942 944 945 947 949 949 949 949 949 951 952
  953 954 957 957 960 961 962 963 963 964 964 964 965 966 966 968 968 968 968 969 969 971 973 973 975
  975 977 978 978 978 979 981 982 985 987 989 990 990 991 991 992 992 993 993 994 994 995 995 998 998

 Sorting 1000 random elements: PASSED

 Generate an array contains 1000 elements with two copies of the numbers from 0 to 499:
    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24
   25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49
   50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74
   75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99
  100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124
  125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149
  150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174
  175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199
  200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224
  225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249
  250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274
  275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299
  300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324
  325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349
  350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374
  375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399
  400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424
  425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449
  450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474
  475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499
    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24
   25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49
   50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74
   75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99
  100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124
  125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149
  150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174
  175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199
  200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224
  225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249
  250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274
  275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299
  300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324
  325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349
  350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374
  375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399
  400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424
  425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449
  450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474
  475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499

 Content after sorting:
    0   0   1   1   2   2   3   3   4   4   5   5   6   6   7   7   8   8   9   9  10  10  11  11  12
   12  13  13  14  14  15  15  16  16  17  17  18  18  19  19  20  20  21  21  22  22  23  23  24  24
   25  25  26  26  27  27  28  28  29  29  30  30  31  31  32  32  33  33  34  34  35  35  36  36  37
   37  38  38  39  39  40  40  41  41  42  42  43  43  44  44  45  45  46  46  47  47  48  48  49  49
   50  50  51  51  52  52  53  53  54  54  55  55  56  56  57  57  58  58  59  59  60  60  61  61  62
   62  63  63  64  64  65  65  66  66  67  67  68  68  69  69  70  70  71  71  72  72  73  73  74  74
   75  75  76  76  77  77  78  78  79  79  80  80  81  81  82  82  83  83  84  84  85  85  86  86  87
   87  88  88  89  89  90  90  91  91  92  92  93  93  94  94  95  95  96  96  97  97  98  98  99  99
  100 100 101 101 102 102 103 103 104 104 105 105 106 106 107 107 108 108 109 109 110 110 111 111 112
  112 113 113 114 114 115 115 116 116 117 117 118 118 119 119 120 120 121 121 122 122 123 123 124 124
  125 125 126 126 127 127 128 128 129 129 130 130 131 131 132 132 133 133 134 134 135 135 136 136 137
  137 138 138 139 139 140 140 141 141 142 142 143 143 144 144 145 145 146 146 147 147 148 148 149 149
  150 150 151 151 152 152 153 153 154 154 155 155 156 156 157 157 158 158 159 159 160 160 161 161 162
  162 163 163 164 164 165 165 166 166 167 167 168 168 169 169 170 170 171 171 172 172 173 173 174 174
  175 175 176 176 177 177 178 178 179 179 180 180 181 181 182 182 183 183 184 184 185 185 186 186 187
  187 188 188 189 189 190 190 191 191 192 192 193 193 194 194 195 195 196 196 197 197 198 198 199 199
  200 200 201 201 202 202 203 203 204 204 205 205 206 206 207 207 208 208 209 209 210 210 211 211 212
  212 213 213 214 214 215 215 216 216 217 217 218 218 219 219 220 220 221 221 222 222 223 223 224 224
  225 225 226 226 227 227 228 228 229 229 230 230 231 231 232 232 233 233 234 234 235 235 236 236 237
  237 238 238 239 239 240 240 241 241 242 242 243 243 244 244 245 245 246 246 247 247 248 248 249 249
  250 250 251 251 252 252 253 253 254 254 255 255 256 256 257 257 258 258 259 259 260 260 261 261 262
  262 263 263 264 264 265 265 266 266 267 267 268 268 269 269 270 270 271 271 272 272 273 273 274 274
  275 275 276 276 277 277 278 278 279 279 280 280 281 281 282 282 283 283 284 284 285 285 286 286 287
  287 288 288 289 289 290 290 291 291 292 292 293 293 294 294 295 295 296 296 297 297 298 298 299 299
  300 300 301 301 302 302 303 303 304 304 305 305 306 306 307 307 308 308 309 309 310 310 311 311 312
  312 313 313 314 314 315 315 316 316 317 317 318 318 319 319 320 320 321 321 322 322 323 323 324 324
  325 325 326 326 327 327 328 328 329 329 330 330 331 331 332 332 333 333 334 334 335 335 336 336 337
  337 338 338 339 339 340 340 341 341 342 342 343 343 344 344 345 345 346 346 347 347 348 348 349 349
  350 350 351 351 352 352 353 353 354 354 355 355 356 356 357 357 358 358 359 359 360 360 361 361 362
  362 363 363 364 364 365 365 366 366 367 367 368 368 369 369 370 370 371 371 372 372 373 373 374 374
  375 375 376 376 377 377 378 378 379 379 380 380 381 381 382 382 383 383 384 384 385 385 386 386 387
  387 388 388 389 389 390 390 391 391 392 392 393 393 394 394 395 395 396 396 397 397 398 398 399 399
  400 400 401 401 402 402 403 403 404 404 405 405 406 406 407 407 408 408 409 409 410 410 411 411 412
  412 413 413 414 414 415 415 416 416 417 417 418 418 419 419 420 420 421 421 422 422 423 423 424 424
  425 425 426 426 427 427 428 428 429 429 430 430 431 431 432 432 433 433 434 434 435 435 436 436 437
  437 438 438 439 439 440 440 441 441 442 442 443 443 444 444 445 445 446 446 447 447 448 448 449 449
  450 450 451 451 452 452 453 453 454 454 455 455 456 456 457 457 458 458 459 459 460 460 461 461 462
  462 463 463 464 464 465 465 466 466 467 467 468 468 469 469 470 470 471 471 472 472 473 473 474 474
  475 475 476 476 477 477 478 478 479 479 480 480 481 481 482 482 483 483 484 484 485 485 486 486 487
  487 488 488 489 489 490 490 491 491 492 492 493 493 494 494 495 495 496 496 497 497 498 498 499 499

 Sorting an array contains 1000 elements with two copies of the numbers from 0 to 499: PASSED

 Generate an array that contains the numbers 0 through 25 already sorted:
   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
 Content after sorting:
   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
 Sorting an array that contains the numbers 0 through 25 already sorted: PASSED

 Generate an array that contains the numbers 25 through 0 in reverse order:
  25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
 Content after sorting:
   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
 Sorting an array that contains the numbers 25 through 0 in reverse order: PASSED

 Time required to sort 10000 random integers
 Using selection sort: It took 0.10226 seconds.
 Using quick sort: It took 0.00137917 seconds.

 Time required to sort 100000 random integers
 Using selection sort: It took 10.7913 seconds.
 Using quick sort: It took 0.0169348 seconds.

 Time required to sort 50000 ascending integers using quick sort
 With the first element as the pivot: It took 2.19803 seconds.
 With middle value of 3 elements as the pivot: It took 0.7424 seconds.
 */

